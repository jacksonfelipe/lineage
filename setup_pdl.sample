#!/bin/bash

# Sai em caso de erro
set -e

# ==================================
# FUNÇÕES AUXILIARES
# ==================================

log() {
  echo
  echo "=================================="
  echo " $1"
  echo "=================================="
}

# ==================================
# INSTALAÇÃO DE DEPENDÊNCIAS DO SISTEMA
# ==================================

instalar_dependencias() {
  log "Atualizando pacotes e instalando dependências básicas"
  sudo apt update
  sudo apt upgrade -y
  sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
}

instalar_gettext() {
  log "Instalando GetText"
  sudo apt-get install --reinstall -y gettext
}

# ==================================
# INSTALAÇÃO DO DOCKER E DOCKER COMPOSE
# ==================================

instalar_docker() {
  log "Instalando Docker"
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
  sudo apt update
  sudo apt install -y docker-ce
  sudo systemctl enable docker
  sudo systemctl start docker
  docker --version
}

instalar_docker_compose() {
  log "Instalando Docker Compose"
  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  docker-compose --version
}

# ==================================
# CLONAGEM E CONFIGURAÇÃO DO PROJETO
# ==================================

clonar_repositorio() {
  log "Clonando repositório"
  git clone https://github.com/D3NKYT0/lineage.git .
  echo "Repositório clonado."
}

criar_install_sh() {
  log "Criando script install.sh"

  cat <<'EOL' > install.sh
#!/bin/bash

set -e

echo "=============================="
echo "Preparando ambiente local"
echo "=============================="

echo "Verificando versão do Python..."
PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
REQUIRED_VERSION="3.10"

version_compare() {
  [ "$(printf '%s\n' "$@" | sort -V | head -n 1)" = "$1" ]
}

if version_compare "$REQUIRED_VERSION" "$PYTHON_VERSION"; then
  echo "Python $PYTHON_VERSION encontrado"
else
  echo "Python 3.10+ necessário, encontrado $PYTHON_VERSION"
  exit 1
fi

echo "Instalando python3-venv e pip..."
sudo apt update
sudo apt install -y python3-venv python3-pip

if [ ! -d ".venv" ]; then
  echo "Criando virtualenv..."
  python3 -m venv .venv
else
  echo "Virtualenv já existe"
fi

echo "Ativando virtualenv..."
source .venv/bin/activate

echo "Atualizando pip e instalando requirements..."
pip install --upgrade pip
pip install -r requirements.txt

echo "Criando pasta de logs..."
mkdir -p logs

echo "Ambiente pronto."
EOL
}

criar_build_sh() {
  log "Criando script build.sh"

  cat <<'EOL' > build.sh
#!/bin/bash

set -e

echo "=============================="
echo "Iniciando processo de deploy"
echo "=============================="

echo "Atualizando código do repositório..."
git pull origin main || { echo "Falha ao atualizar o repositório"; exit 1; }

echo "Ativando virtualenv..."
source .venv/bin/activate || { echo "Virtualenv não encontrada"; exit 1; }

echo "Atualizando pacotes..."
pip install -U -r requirements.txt || { echo "Falha ao atualizar pacotes"; exit 1; }

echo "Rodando check do Django..."
python3 manage.py check || { echo "Erro no Django check"; exit 1; }

echo "Criando novas migrações..."
python3 manage.py makemigrations || { echo "Erro ao criar migrações"; exit 1; }

echo "Derrubando containers..."
docker compose down || { echo "Erro ao parar containers"; }

echo "Removendo containers antigos..."
containers=$(docker ps -a -q --filter name=site --filter name=celery --filter name=celery_beat --filter name=flower --filter name=nginx --filter name=redis)
if [ -n "$containers" ]; then
  docker rm $containers || echo "Alguns containers não puderam ser removidos"
else
  echo "Nenhum container para remover."
fi

echo "Removendo volume static_data..."
docker volume rm $(docker volume ls -q --filter name=static_data) || echo "Volume não encontrado"

echo "Construindo imagens Docker..."
docker compose build || { echo "Erro ao buildar imagens"; exit 1; }

echo "Subindo containers..."
docker compose up -d || { echo "Erro ao iniciar containers"; exit 1; }

echo "Aguardando banco de dados..."
until docker compose exec postgres pg_isready -U db_user > /dev/null 2>&1; do
  echo "$(date '+%H:%M:%S') - PostgreSQL ainda não disponível..."
  sleep 2
done

echo "Aplicando migrações no container..."
docker compose exec site python3 manage.py migrate || { echo "Erro ao aplicar migrações"; exit 1; }

echo "Limpando recursos antigos..."
docker image prune -f
docker volume prune -f
docker container prune -f
docker builder prune -f

echo "Deploy concluído."
EOL
}

configurar_projeto() {
  log "Configurando ambiente do projeto"
  chmod +x install.sh build.sh
  touch .env
  echo ".env criado (preencha manualmente)"
}

executar_scripts() {
  log "Executando install.sh e build.sh"
  ./install.sh
}

# ==================================
# EXECUÇÃO FINAL
# ==================================

instalar_dependencias
instalar_gettext
instalar_docker
instalar_docker_compose
clonar_repositorio
criar_install_sh
criar_build_sh
configurar_projeto
executar_scripts

log "Instalação e configuração concluídas!"
