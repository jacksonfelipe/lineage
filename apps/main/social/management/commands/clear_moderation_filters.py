from django.core.management.base import BaseCommand
from django.utils.translation import gettext as _
from apps.main.social.models import ContentFilter


class Command(BaseCommand):
    help = 'Remove todos os filtros de modera√ß√£o do sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a remo√ß√£o sem confirma√ß√£o',
        )
        parser.add_argument(
            '--keep-defaults',
            action='store_true',
            help='Mant√©m apenas os filtros padr√£o do sistema',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Mostra quais filtros seriam removidos sem executar',
        )

    def handle(self, *args, **options):
        force = options['force']
        keep_defaults = options['keep_defaults']
        dry_run = options['dry_run']

        # Obter todos os filtros
        if keep_defaults:
            # Manter apenas filtros padr√£o do sistema
            filters_to_remove = ContentFilter.objects.exclude(
                name__in=[
                    'Padr√£o de Spam Autom√°tico',
                    'Spam - Ofertas Comerciais Agressivas',
                    'Spam - Medicamentos e Suplementos',
                    'Spam - Esquemas Financeiros Suspeitos',
                    'Palavr√µes - Portugu√™s (Leve)',
                    'Palavr√µes - Portugu√™s (Severo)',
                    'Palavr√µes com S√≠mbolos',
                    'Conte√∫do Pornogr√°fico Expl√≠cito',
                    'Sites Pornogr√°ficos',
                    'Encurtadores de URL Suspeitos',
                    'Dom√≠nios Suspeitos de Phishing',
                    'M√∫ltiplas URLs (Spam)',
                    'Discurso de √ìdio Racial',
                    'Discurso de √ìdio Homof√≥bico',
                    'Fake News M√©dicas',
                    'Conte√∫do Repetitivo (Spam)',
                    'CAPS Excessivo',
                    'Informa√ß√µes Pessoais',
                    'Golpes Brasileiros - PIX',
                    'Sites de Apostas Brasileiros'
                ]
            )
            action_description = "removendo filtros personalizados (mantendo padr√µes)"
        else:
            # Remover todos os filtros
            filters_to_remove = ContentFilter.objects.all()
            action_description = "removendo TODOS os filtros"

        total_filters = filters_to_remove.count()

        if total_filters == 0:
            self.stdout.write(
                self.style.WARNING('Nenhum filtro encontrado para remo√ß√£o.')
            )
            return

        # Mostrar filtros que ser√£o removidos
        self.stdout.write(
            self.style.WARNING(f'\n{"="*60}')
        )
        self.stdout.write(
            self.style.WARNING(f'üóëÔ∏è  LIMPEZA DE FILTROS DE MODERA√á√ÉO')
        )
        self.stdout.write(
            self.style.WARNING(f'{"="*60}')
        )
        
        self.stdout.write(f'\nüìã A√ß√£o: {action_description}')
        self.stdout.write(f'üìä Total de filtros: {total_filters}')
        
        if dry_run:
            self.stdout.write(f'üîç Modo: SIMULA√á√ÉO (dry-run)')
        else:
            self.stdout.write(f'üîç Modo: EXECU√á√ÉO REAL')

        # Listar filtros que ser√£o removidos
        self.stdout.write(f'\nüìù Filtros que ser√£o removidos:')
        self.stdout.write(f'{"-"*50}')
        
        for i, filter_obj in enumerate(filters_to_remove, 1):
            status_icon = "üü¢" if filter_obj.is_active else "üî¥"
            self.stdout.write(
                f'{i:2d}. {status_icon} {filter_obj.name} ({filter_obj.get_filter_type_display()})'
            )

        # Confirma√ß√£o (se n√£o for force e n√£o for dry-run)
        if not force and not dry_run:
            self.stdout.write(f'\n{"-"*60}')
            self.stdout.write(
                self.style.ERROR('‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o √© irrevers√≠vel!')
            )
            self.stdout.write(
                self.style.ERROR('Todos os filtros listados acima ser√£o PERMANENTEMENTE removidos.')
            )
            
            confirm = input('\n‚ùì Confirma a remo√ß√£o? (digite "SIM" para confirmar): ')
            
            if confirm.upper() != 'SIM':
                self.stdout.write(
                    self.style.WARNING('‚ùå Opera√ß√£o cancelada pelo usu√°rio.')
                )
                return

        # Executar remo√ß√£o
        if dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'\n‚úÖ SIMULA√á√ÉO: {total_filters} filtros seriam removidos')
            )
            self.stdout.write(
                self.style.SUCCESS('Para executar realmente, remova a op√ß√£o --dry-run')
            )
        else:
            # Fazer backup dos filtros antes de remover
            backup_data = []
            for filter_obj in filters_to_remove:
                backup_data.append({
                    'name': filter_obj.name,
                    'filter_type': filter_obj.filter_type,
                    'pattern': filter_obj.pattern,
                    'action': filter_obj.action,
                    'description': filter_obj.description,
                    'case_sensitive': filter_obj.case_sensitive,
                    'apply_to_posts': filter_obj.apply_to_posts,
                    'apply_to_comments': filter_obj.apply_to_comments,
                    'apply_to_usernames': filter_obj.apply_to_usernames,
                    'is_active': filter_obj.is_active,
                    'matches_count': filter_obj.matches_count,
                    'last_matched': filter_obj.last_matched,
                })

            # Remover filtros
            deleted_count = filters_to_remove.delete()[0]

            # Mostrar resultado
            self.stdout.write(
                self.style.SUCCESS(f'\n‚úÖ SUCESSO: {deleted_count} filtros removidos!')
            )

            # Salvar backup em arquivo (opcional)
            if backup_data:
                import json
                from datetime import datetime
                
                backup_filename = f'filters_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
                
                try:
                    with open(backup_filename, 'w', encoding='utf-8') as f:
                        json.dump(backup_data, f, indent=2, ensure_ascii=False, default=str)
                    
                    self.stdout.write(
                        self.style.SUCCESS(f'üíæ Backup salvo em: {backup_filename}')
                    )
                except Exception as e:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  Erro ao salvar backup: {e}')
                    )

        # Estat√≠sticas finais
        remaining_filters = ContentFilter.objects.count()
        active_filters = ContentFilter.objects.filter(is_active=True).count()
        
        self.stdout.write(f'\nüìä Estat√≠sticas finais:')
        self.stdout.write(f'   ‚Ä¢ Filtros restantes: {remaining_filters}')
        self.stdout.write(f'   ‚Ä¢ Filtros ativos: {active_filters}')
        
        if remaining_filters == 0:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  Nenhum filtro restante no sistema!')
            )
            self.stdout.write(
                self.style.WARNING('Execute "python manage.py setup_moderation" para recriar os filtros padr√£o.')
            )
        
        self.stdout.write(f'\n{"="*60}')
        self.stdout.write(
            self.style.SUCCESS('üéâ Limpeza de filtros conclu√≠da!')
        )
        self.stdout.write(f'{"="*60}')
