#!/bin/bash

set -e

INSTALL_DIR=".install_status"
mkdir -p $INSTALL_DIR

clear

echo "========================================================="
echo "  üöÄ Bem-vindo ao Instalador do Projeto Lineage 2 PDL!   "
echo "========================================================="
echo

if [ -f "$INSTALL_DIR/.install_done" ]; then
  echo "‚ö†Ô∏è  Instala√ß√£o j√° foi conclu√≠da anteriormente."
  echo
  read -p "Deseja rodar os containers (s) ou refazer a instala√ß√£o (r)? (s/r): " OPCAO

  if [[ "$OPCAO" == "s" || "$OPCAO" == "S" ]]; then
    docker compose up -d
    echo "‚úÖ Containers iniciados."
    exit 0
  elif [[ "$OPCAO" == "r" || "$OPCAO" == "R" ]]; then
    echo "üîÑ Refazendo instala√ß√£o..."
    rm -rf $INSTALL_DIR
    mkdir -p $INSTALL_DIR
  else
    echo "‚ùå Op√ß√£o inv√°lida."
    exit 1
  fi
fi

echo "Este script vai preparar todo o ambiente para voc√™."
echo
read -p "Deseja continuar com a instala√ß√£o? (s/n): " CONTINUE

if [[ "$CONTINUE" != "s" && "$CONTINUE" != "S" ]]; then
  echo "Instala√ß√£o cancelada."
  exit 0
fi

# Atualizar e instalar depend√™ncias
if [ ! -f "$INSTALL_DIR/system_ready" ]; then
  echo
  echo "üîÑ Atualizando pacotes e instalando depend√™ncias..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install -y apt-transport-https ca-certificates curl software-properties-common python3-venv python3-pip gettext
  touch "$INSTALL_DIR/system_ready"
fi

# Instalar Docker e Compose
if [ ! -f "$INSTALL_DIR/docker_ready" ]; then
  echo
  echo "üê≥ Instalando Docker e Docker Compose..."
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
  sudo apt update
  sudo apt install -y docker-ce
  sudo systemctl enable docker
  sudo systemctl start docker
  docker --version
  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  docker-compose --version
  touch "$INSTALL_DIR/docker_ready"
fi

# Clonar reposit√≥rio
if [ ! -f "$INSTALL_DIR/repo_cloned" ]; then
  echo
  echo "üìÇ Clonando reposit√≥rio do projeto..."
  git clone https://github.com/D3NKYT0/lineage.git || true
  cd lineage
  touch "../$INSTALL_DIR/repo_cloned"
else
  cd lineage
fi

# Configurar ambiente Python
if [ ! -f "../$INSTALL_DIR/python_ready" ]; then
  echo
  echo "üêç Configurando ambiente Python (virtualenv)..."
  python3 -m venv .venv
  source .venv/bin/activate
  pip install --upgrade pip
  pip install -r requirements.txt
  mkdir -p logs
  touch "../$INSTALL_DIR/python_ready"
else
  source .venv/bin/activate
fi

# Criar .env
if [ ! -f "../$INSTALL_DIR/env_created" ]; then
  echo
  echo "‚öôÔ∏è Criando arquivo .env (se n√£o existir)..."
  if [ ! -f ".env" ]; then
    cat <<EOL > .env
DEBUG=False
SECRET_KEY='key_32_bytes'
# restante...
EOL
  fi
  touch "../$INSTALL_DIR/env_created"
fi

# Configurar autentica√ß√£o b√°sica
if [ ! -f "../$INSTALL_DIR/htpasswd_created" ]; then
  echo
  echo "üîê Configurando autentica√ß√£o b√°sica (.htpasswd)..."
  read -p "üë§ Digite o login para o admin: " ADMIN_USER
  read -s -p "üîí Digite a senha para o admin: " ADMIN_PASS
  echo
  mkdir -p nginx
  HASHED_PASS=$(python3 - <<EOF
from passlib.hash import bcrypt
print(bcrypt.using(rounds=10).hash("$ADMIN_PASS"))
EOF
)
  echo "$ADMIN_USER:$HASHED_PASS" > nginx/.htpasswd
  echo "‚úÖ Arquivo nginx/.htpasswd criado."
  touch "../$INSTALL_DIR/htpasswd_created"
fi

# Gerar chave Fernet
if [ ! -f "../$INSTALL_DIR/fernet_key_generated" ]; then
  FERNET_KEY=$(python3 - <<EOF
from cryptography.fernet import Fernet
print(Fernet.generate_key().decode())
EOF
)
  sed -i "/^ENCRYPTION_KEY=/c\ENCRYPTION_KEY='$FERNET_KEY'" .env
  echo "‚úÖ ENCRYPTION_KEY atualizado no .env."
  touch "../$INSTALL_DIR/fernet_key_generated"
fi

# üõ†Ô∏è Docker: parar, limpar, rebuildar, rodar e migrar

echo
echo "üèóÔ∏è Parando containers antigos..."
docker compose down || { echo "‚ùå Falha ao parar containers"; }

echo
echo "üóëÔ∏è  Removendo containers antigos espec√≠ficos..."
containers=$(docker ps -a -q --filter name=site --filter name=celery --filter name=celery_beat --filter name=flower --filter name=nginx --filter name=redis)
if [ -n "$containers" ]; then
  docker rm $containers || echo "‚ÑπÔ∏è Alguns containers n√£o puderam ser removidos (podem j√° estar removidos)"
else
  echo "‚ÑπÔ∏è Nenhum container antigo encontrado."
fi

echo
echo "üóëÔ∏è  Removendo volume opcional static_data (se existir)..."
docker volume rm $(docker volume ls -q --filter name=static_data) || echo "‚ÑπÔ∏è Volume n√£o encontrado ou j√° removido"

echo
echo "üî® Construindo Docker images..."
docker compose build || { echo "‚ùå Falha ao buildar imagens"; exit 1; }

echo
echo "üöÄ Subindo containers..."
docker compose up -d || { echo "‚ùå Falha ao subir containers"; exit 1; }

echo
echo "‚è≥ Aguardando banco de dados iniciar..."
until docker compose exec postgres pg_isready -U db_user > /dev/null 2>&1; do
  echo "$(date '+%H:%M:%S') - PostgreSQL n√£o est√° pronto ainda... aguardando..."
  sleep 2
done

echo
echo "üóÑÔ∏è Aplicando migra√ß√µes no banco..."
docker compose exec site python3 manage.py migrate || { echo "‚ùå Falha ao aplicar migra√ß√µes"; exit 1; }

echo
echo "üßπ Limpando imagens, volumes, containers e builders n√£o usados..."
docker image prune -f
docker volume prune -f
docker container prune -f
docker builder prune -f

# Criar superuser
if [ ! -f "../$INSTALL_DIR/superuser_created" ]; then
  echo
  echo "üë§ Criando usu√°rio administrador no Django..."
  read -p "Username: " DJANGO_SUPERUSER_USERNAME
  read -p "Email: " DJANGO_SUPERUSER_EMAIL
  read -s -p "Password: " DJANGO_SUPERUSER_PASSWORD
  echo
  read -s -p "Confirme a senha: " DJANGO_SUPERUSER_PASSWORD_CONFIRM
  echo

  if [ "$DJANGO_SUPERUSER_PASSWORD" != "$DJANGO_SUPERUSER_PASSWORD_CONFIRM" ]; then
    echo "‚ùå As senhas n√£o conferem. Abortando."
    exit 1
  fi

  docker compose exec site python3 manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists():
    User.objects.create_superuser(
        username='$DJANGO_SUPERUSER_USERNAME',
        email='$DJANGO_SUPERUSER_EMAIL',
        password='$DJANGO_SUPERUSER_PASSWORD'
    )
    print('‚úÖ Superuser \"$DJANGO_SUPERUSER_USERNAME\" criado com sucesso.')
else:
    print('‚ÑπÔ∏è O usu√°rio \"$DJANGO_SUPERUSER_USERNAME\" j√° existe.')
"
  touch "../$INSTALL_DIR/superuser_created"
fi

# Finaliza instala√ß√£o
touch "$INSTALL_DIR/.install_done"

echo
echo "üéâ Instala√ß√£o conclu√≠da com sucesso!"
echo "Acesse: http://localhost:80"
echo "Para gerenciar o projeto, use:"
echo " - docker compose up -d         # Para iniciar"
echo " - docker compose down          # Para parar"
echo
