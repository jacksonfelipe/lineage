from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.conf import settings
from apps.licence.models import License
from apps.licence.manager import license_manager
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Diagnostica problemas com o status da licen√ßa'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='Limpa o cache de licen√ßa'
        )
        parser.add_argument(
            '--check-all',
            action='store_true',
            help='Verifica todas as licen√ßas no sistema'
        )

    def handle(self, *args, **options):
        self.stdout.write("üîç Diagn√≥stico de Status da Licen√ßa")
        self.stdout.write("=" * 50)

        # Limpa cache se solicitado
        if options['clear_cache']:
            cache_key = 'current_license'
            cache.delete(cache_key)
            self.stdout.write("üóëÔ∏è  Cache de licen√ßa limpo")

        # Verifica configura√ß√µes
        self.stdout.write(f"\nüìã Configura√ß√µes:")
        self.stdout.write(f"   DEBUG: {settings.DEBUG}")
        self.stdout.write(f"   Cache Timeout: {settings.LICENSE_CONFIG.get('CACHE_TIMEOUT', 3600)}s")
        self.stdout.write(f"   Verification Interval: {settings.LICENSE_CONFIG.get('VERIFICATION_INTERVAL', 3600)}s")

        # Verifica todas as licen√ßas
        self.stdout.write(f"\nüìã Todas as Licen√ßas no Sistema:")
        licenses = License.objects.all().order_by('-created_at')
        
        if not licenses.exists():
            self.stdout.write("   ‚ùå Nenhuma licen√ßa encontrada")
            return

        for i, license in enumerate(licenses, 1):
            self.stdout.write(f"\n   {i}. {license.license_key[:12]}...")
            self.stdout.write(f"      Tipo: {license.get_license_type_display()}")
            self.stdout.write(f"      Status: {license.get_status_display()}")
            self.stdout.write(f"      Dom√≠nio: {license.domain}")
            self.stdout.write(f"      Criada: {license.created_at.strftime('%d/%m/%Y %H:%M:%S')}")
            self.stdout.write(f"      Ativada: {license.activated_at.strftime('%d/%m/%Y %H:%M:%S') if license.activated_at else 'Nunca'}")
            if license.expires_at:
                self.stdout.write(f"      Expira: {license.expires_at.strftime('%d/%m/%Y %H:%M:%S')}")
                if license.expires_at < timezone.now():
                    self.stdout.write(f"      ‚ö†Ô∏è  EXPIRADA!")
            self.stdout.write(f"      Verifica√ß√µes: {license.verification_count}")
            if license.last_verification:
                self.stdout.write(f"      √öltima verifica√ß√£o: {license.last_verification.strftime('%d/%m/%Y %H:%M:%S')}")

        # Verifica licen√ßa atual via manager
        self.stdout.write(f"\nüîç Verifica√ß√£o via LicenseManager:")
        current_license = license_manager.get_current_license()
        
        if current_license:
            self.stdout.write(f"   ‚úÖ Licen√ßa atual encontrada: {current_license.license_key[:12]}...")
            self.stdout.write(f"   Status: {current_license.get_status_display()}")
            
            # Verifica status
            is_valid = license_manager.check_license_status()
            self.stdout.write(f"   V√°lida: {'‚úÖ Sim' if is_valid else '‚ùå N√£o'}")
        else:
            self.stdout.write("   ‚ùå Nenhuma licen√ßa atual encontrada")

        # Verifica cache
        self.stdout.write(f"\nüóÑÔ∏è  Status do Cache:")
        cache_key = 'current_license'
        cached_license = cache.get(cache_key)
        
        if cached_license:
            self.stdout.write(f"   ‚úÖ Cache encontrado: {cached_license.license_key[:12]}...")
            self.stdout.write(f"   Status no cache: {cached_license.get_status_display()}")
        else:
            self.stdout.write("   ‚ùå Cache vazio")

        # Verifica se h√° processos autom√°ticos
        self.stdout.write(f"\n‚öôÔ∏è  Processos Autom√°ticos:")
        
        # Verifica se h√° verifica√ß√£o remota
        if current_license:
            should_verify = license_manager._should_verify_remotely(current_license)
            self.stdout.write(f"   Verifica√ß√£o remota necess√°ria: {'‚úÖ Sim' if should_verify else '‚ùå N√£o'}")
            
            if should_verify:
                self.stdout.write("   ‚ö†Ô∏è  Isso pode estar causando reativa√ß√£o autom√°tica!")

        # Verifica se h√° verifica√ß√£o de expira√ß√£o autom√°tica
        if current_license and current_license.license_type == 'pro' and current_license.expires_at:
            if current_license.expires_at > timezone.now():
                self.stdout.write("   ‚úÖ Licen√ßa PRO n√£o expirou")
            else:
                self.stdout.write("   ‚ö†Ô∏è  Licen√ßa PRO expirou - pode ser reativada automaticamente")

        # Recomenda√ß√µes
        self.stdout.write(f"\nüí° Recomenda√ß√µes:")
        self.stdout.write("   ‚Ä¢ Use --clear-cache para limpar o cache")
        self.stdout.write("   ‚Ä¢ Verifique se h√° processos Celery rodando")
        self.stdout.write("   ‚Ä¢ Monitore os logs para ver verifica√ß√µes autom√°ticas")
        self.stdout.write("   ‚Ä¢ Verifique se a data de expira√ß√£o est√° correta")
        
        if current_license and current_license.status == 'active':
            self.stdout.write("   ‚Ä¢ Para testar bloqueio, mude o status para 'suspended' ou 'expired'")
            self.stdout.write("   ‚Ä¢ Evite usar 'pending' pois pode ser reativado automaticamente") 