from django.core.management.base import BaseCommand
from django.conf import settings
from apps.licence.utils import validate_contract_dns
from apps.licence.manager import license_manager


class Command(BaseCommand):
    help = 'Testa a valida√ß√£o DNS de contratos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--contract',
            type=str,
            default='TEST-2024-001',
            help='N√∫mero do contrato para testar'
        )
        parser.add_argument(
            '--domain',
            type=str,
            default='localhost',
            help='Dom√≠nio para testar'
        )
        parser.add_argument(
            '--create-pro',
            action='store_true',
            help='Cria uma licen√ßa PRO de teste'
        )

    def handle(self, *args, **options):
        self.stdout.write("üîç Teste de Valida√ß√£o DNS")
        self.stdout.write("=" * 50)

        contract_number = options['contract']
        domain = options['domain']
        create_pro = options['create_pro']

        # Verifica se est√° em modo DEBUG
        self.stdout.write(f"üìã Modo DEBUG: {'‚úÖ Sim' if settings.DEBUG else '‚ùå N√£o'}")
        
        if settings.DEBUG:
            self.stdout.write("üí° Em modo DEBUG, a valida√ß√£o DNS ser√° pulada automaticamente")

        # Testa valida√ß√£o DNS
        self.stdout.write(f"\nüß™ Testando valida√ß√£o DNS...")
        self.stdout.write(f"   Contrato: {contract_number}")
        self.stdout.write(f"   Dom√≠nio: {domain}")
        
        success, message = validate_contract_dns(contract_number, domain)
        
        if success:
            self.stdout.write(self.style.SUCCESS(f"‚úÖ {message}"))
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå {message}"))

        # Testa cria√ß√£o de licen√ßa PRO
        if create_pro:
            self.stdout.write(f"\nüß™ Testando cria√ß√£o de licen√ßa PRO...")
            
            success, result = license_manager.create_pro_license(
                domain=domain,
                contact_email="test@example.com",
                company_name="Empresa Teste",
                contact_phone="+55 11 99999-9999",
                contract_number=contract_number,
                skip_dns_validation=False  # Deixa o sistema decidir baseado no DEBUG
            )
            
            if success:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Licen√ßa PRO criada com ID: {result}"))
            else:
                self.stdout.write(self.style.ERROR(f"‚ùå Erro ao criar licen√ßa: {result}"))

        # Informa√ß√µes sobre configura√ß√£o
        self.stdout.write(f"\nüìã Configura√ß√£o Atual:")
        self.stdout.write(f"   DNS_TIMEOUT: {settings.LICENSE_CONFIG.get('DNS_TIMEOUT', 10)}s")
        self.stdout.write(f"   ENCRYPTION_KEY: {'‚úÖ Configurada' if settings.LICENSE_CONFIG.get('ENCRYPTION_KEY') else '‚ùå N√£o configurada'}")

        # Recomenda√ß√µes
        self.stdout.write(f"\nüí° Recomenda√ß√µes:")
        if settings.DEBUG:
            self.stdout.write("   ‚Ä¢ Em desenvolvimento, a valida√ß√£o DNS √© pulada automaticamente")
            self.stdout.write("   ‚Ä¢ Para testar valida√ß√£o real, use DEBUG=False")
        else:
            self.stdout.write("   ‚Ä¢ Em produ√ß√£o, configure os registros DNS corretamente")
            self.stdout.write("   ‚Ä¢ Verifique se o dom√≠nio denky.dev.br est√° acess√≠vel")
        
        self.stdout.write("   ‚Ä¢ Use --create-pro para testar cria√ß√£o de licen√ßa PRO")
        self.stdout.write("   ‚Ä¢ Use --contract e --domain para testar contratos espec√≠ficos") 